//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["sourceMap"],"names":["ver","dd","c","indebug","console","tt","document","getCookie","d","e","f","decodeURIComponent","g","h","j","clickBtn","RegExp","thouand","getlocalv","localStorage","run","stopkeep","setInterval","$","clearInterval","master","keepbuy","stopall","clearmodal","setTimeout","timelimit","launch","setvoucher","typemin","vcode","addcart","prod","fetch","postbody","parseInt","qty","srcurl","JSON","location","XCSRFTOKEN","prompt","delimiter","window","tmpshop","now","Date","timemod","worktime","timer","alert"],"mappings":"s6CAOA,IAAIA,GAAA,C,SAAJ,CAEA,SAASC,EAAT,CAAYC,CAAZ,CAAgB,CAAC,GAAGC,OAAH,CAAYC,OAAA,C,KAAA,EAAYF,CAAZ,EAAb,CAChB,SAASG,EAAT,CAAYH,CAAZ,CAAc,CAACI,QAAA,C,OAAA,EAAeJ,CAAf,CAAD,CACd,SAASK,SAAT,CAAmBC,CAAnB,CAA0B,CACxB,IAAIC,CAAA,CAAOD,CAAA,C,GAAX,CACA,IAAIE,CAAA,CAAgBC,kBAAA,CAAmBL,QAAA,C,QAAA,CAAnB,CAApB,CACA,IAAIM,CAAA,CAAKF,CAAA,C,SAAA,E,GAAA,CAAT,CACA,IAAI,IAAIG,CAAA,C,GAAJ,CAAWA,CAAA,CAAGD,CAAA,C,SAAA,CAAlB,CAA6BC,CAAA,EAA7B,CAAkC,CAChC,IAAIC,CAAA,CAAIF,CAAA,CAAGC,CAAH,CAAR,CACA,MAAOC,CAAA,C,SAAA,E,GAAA,G,MAAP,CAA2B,CACzBA,CAAA,CAAIA,CAAA,C,SAAA,E,GAAA,CAAJ,CADyB,CAG3B,GAAIA,CAAA,C,SAAA,EAAUL,CAAV,G,GAAJ,CAA0B,CACxB,OAAOK,CAAA,C,SAAA,EAAYL,CAAA,C,SAAA,CAAZ,CAAyBK,CAAA,C,SAAA,CAAzB,CAAP,CADwB,CALM,CASlC,M,EAAA,CAbwB,CAe1B,SAASC,QAAT,CAAkBb,CAAlB,CAAsB,CAClBI,QAAA,C,kBAAA,E,SAAA,E,SAAA,EAA4C,SAASE,CAAT,CAAW,CACrD,IAAIC,CAAA,CAAK,IAAIO,MAAJ,CAAWd,CAAX,CAAT,CACA,GAAKO,CAAA,C,SAAA,EAAQD,CAAA,C,SAAA,CAAR,CAAL,CAA2B,CAAEA,CAAA,C,SAAA,IAAU,OAAZ,CAF0B,CAAvD,EADkB,CAMtB,SAASS,OAAT,CAAiBf,CAAjB,CAAoB,CAChB,OAAOA,CAAA,C,UAAA,I,SAAA,EAAqB,uBAArB,C,GAAA,CAAP,CADgB,CAIpB,SAASgB,SAAT,CAAmBhB,CAAnB,CAAuBM,CAAA,C,EAAvB,CAA8B,C,sqBAC1B,GAAKW,YAAA,C,SAAA,EAAqBjB,CAArB,CAAL,CAAiC,CAC7B,OAAOiB,YAAA,C,SAAA,EAAqBjB,CAArB,CAAP,CAD6B,CAGjC,OAAOM,CAAP,CAJ0B,CAO9B,SAASY,GAAT,EAAc,C,qXACV,GAAKC,QAAA,C,GAAL,CAAiB,CAAEpB,EAAA,C,SAAA,EAAgB,OAAlB,CACjBA,EAAA,C,SAAA,EAGA,IAAIO,CAAA,CAAkBc,WAAA,CAAY,UAAU,CACxC,GAAIC,CAAA,C,sBAAA,E,SAAA,E,GAAJ,CAAoC,CAChCC,aAAA,CAAcC,MAAd,EACAD,aAAA,CAAchB,CAAd,EACA,GAAIkB,OAAJ,CAAY,CACRzB,EAAA,C,SAAA,EACA0B,OAAA,C,GAAA,CACAC,UAAA,GACAC,UAAA,CAAW,UAAU,CAAER,QAAA,GAAF,CAArB,CAAoCS,SAAA,C,KAApC,EACAD,UAAA,CAAWT,GAAX,C,KAAA,EALQ,CAQZnB,EAAA,C,SAAA,EAXgC,CADI,CAAtB,C,GAAA,CAAtB,CAgBAwB,MAAA,CAAOH,WAAA,CAAYS,MAAZ,C,GAAA,CAAP,CACAF,UAAA,CAAW,UAAU,CAACL,aAAA,CAAcC,MAAd,EAAsBE,OAAA,GAAvB,CAArB,CAAwDG,SAAA,C,KAAxD,EAtBU,CA0Bd,SAASC,MAAT,EAAkB,CACd,GAAKJ,OAAA,C,GAAL,CAAkB,OAClB,GAAKrB,QAAA,C,SAAA,E,oBAAA,E,QAAA,E,GAAL,CAAgE,CAAC,OAAD,CAEhEiB,CAAA,C,SAAA,E,SAAA,IACA,IAAIrB,CAAA,CAAYoB,WAAA,CAAY,UAAW,CACpC,GAAKK,OAAA,C,GAAL,CAAmBH,aAAA,CAActB,CAAd,EAEnB,GAAKqB,CAAA,C,SAAA,E,QAAA,E,GAAL,CAA+C,CAE5CC,aAAA,CAActB,CAAd,EACA8B,UAAA,GAH4C,CAHX,CAAvB,C,GAAA,CAAhB,CALc,CAgBlB,SAASA,UAAT,EAAqB,CAEjB,IAAI9B,CAAA,CAAYoB,WAAA,CAAY,UAAU,CAElC,GAAKC,CAAA,C,SAAA,E,SAAA,E,GAAA,EAA4CA,CAAA,C,oCAAA,E,SAAA,E,GAAjD,CAAoG,CAEhGC,aAAA,CAActB,CAAd,EAGA,GAAM+B,OAAN,CAAe,CACX,GAAMV,CAAA,C,SAAE,CAAsCN,OAAA,CAAQiB,KAAR,CAAtC,C,OAAF,E,SAAA,E,SAAA,E,MAAA,E,SAAA,E,QAAA,E,GAAN,CAAsH,CAClHV,aAAA,CAAcC,MAAd,EAAsBE,OAAA,GACtB,GAAKJ,CAAA,C,SAAE,CAAsCN,OAAA,CAAQiB,KAAR,CAAtC,C,OAAF,E,SAAA,E,SAAA,E,SAAA,E,SAAA,E,QAAA,E,GAAL,CAA4HX,CAAA,C,SAAE,CAAsCN,OAAA,CAAQiB,KAAR,CAAtC,C,OAAF,E,SAAA,E,SAAA,E,SAAA,E,SAAA,E,OAAA,IAC5HnB,QAAA,C,GAAA,EACA,OAJkH,CAAtH,IAKO,CAGHA,QAAA,C,IAAA,EAHG,CANI,CAAf,IAWO,CACH,GAAMQ,CAAA,C,SAAE,CAAWW,KAAX,C,GAAF,E,SAAA,E,SAAA,E,MAAA,E,SAAA,E,SAAA,E,GAAN,CAAiF,CAC7EV,aAAA,CAAcC,MAAd,EAAsBE,OAAA,GACtB,GAAKJ,CAAA,C,SAAE,CAAWW,KAAX,C,GAAF,E,SAAA,E,SAAA,E,SAAA,E,SAAA,E,QAAA,E,GAAL,CAAyFX,CAAA,C,UAAE,CAAWW,KAAX,C,GAAF,E,SAAA,E,SAAA,E,SAAA,E,aAAA,E,SAAA,IACzFnB,QAAA,C,GAAA,EACA,OAJ6E,CAAjF,IAKO,CAGHA,QAAA,C,IAAA,EAHG,CANJ,CAhByF,CAFlE,CAAtB,C,GAAA,CAAhB,CAFiB,CAuCrB,SAASoB,OAAT,CAAiBjC,CAAjB,CAAuB,CACrB,IAAIM,CAAA,C,SAAU,CAA2B4B,IAAA,C,SAAA,CAA3B,C,UAAA,CAAkDA,IAAA,C,QAAA,CAAhE,CACAC,KAAA,CAAM7B,CAAN,E,SAAA,EAAoBC,CAAA,EAAG,CAAC,OAAOA,CAAA,C,SAAA,GAAP,CAAD,CAAvB,E,SAAA,EAA+C,SAASA,CAAT,CAAY,CACvD2B,IAAA,C,SAAA,EAAgB3B,CAAA,C,QAAA,E,SAAA,CAAhB,CACA2B,IAAA,C,QAAA,EAAc3B,CAAA,C,QAAA,E,QAAA,CAAd,CACA2B,IAAA,C,SAAA,EAAc3B,CAAA,C,QAAA,E,QAAA,CAAd,CACA2B,IAAA,C,SAAA,EAAgB3B,CAAA,C,QAAA,E,QAAA,E,QAAA,E,GAAA,CAAwBA,CAAA,C,MAAA,E,QAAA,E,SAAA,EAAoBC,CAAA,EAAK,CAAC,OAAOA,CAAA,C,SAAA,E,GAAP,CAAD,CAAzB,E,SAAA,CAAxB,CAA+E,IAA/F,CACAN,OAAA,C,SAAA,EAAYgC,IAAZ,EAEAE,QAAA,CAAW,C,UAAC,CAAWC,QAAA,CAASC,GAAT,CAAZ,C,UAA0B,C,IAA1B,C,sBACS,C,GADT,C,oBAEU,C,GAFV,C,QAGU,C,SAHV,C,QAGyC,CAASJ,IAAA,C,SAAA,CAHlD,C,QAG8D,CAASA,IAAA,C,SAAA,CAHvE,CAAX,CAKA,GAAIA,IAAA,C,SAAA,CAAJ,CAAkBE,QAAA,C,SAAA,EAAqBF,IAAA,C,SAAA,CAArB,CAClBC,KAAA,C,SAAA,CAAiC,C,aAAC,C,SAAD,C,SAAyB,CAAU,C,QAAC,C,SAAD,C,iBAA6B,C,qCAA7B,C,cAAqF,C,SAArF,C,gBAAuH,C,QAAvH,C,gBAAiL,C,MAAjL,C,gBAAyM,C,SAAzM,C,cAAwO,C,IAAxO,C,aAA4P,CAAcnC,CAA1Q,C,kBAAgR,C,QAAhR,CAAnC,C,UAAwV,C,EAAW,CAAGuC,MAAH,C,EAAnW,C,gBAAgX,C,SAAhX,C,MAA8Z,CAAQC,IAAA,C,SAAA,EAAeJ,QAAf,CAAta,C,QAA+b,C,QAA/b,C,MAA+c,C,SAA/c,CAAjC,E,SAAA,EACM5B,CAAA,EAAG,CAAC,OAAOA,CAAA,C,SAAA,GAAP,CAAD,CADT,E,SAAA,EAEM,SAASA,CAAT,CAAW,CACbN,OAAA,C,SAAA,EAAYM,CAAZ,EACAiC,QAAA,C,SAAA,E,SAAc,CAAkBP,IAAA,C,SAAA,CAAlB,C,SAAA,CAAyCA,IAAA,C,SAAA,CAAvD,CAFa,CAFjB,EAbuD,CAA3D,EAoBA,M,GAAA,CAtBqB,CAyBvB,SAASR,UAAT,EACA,CACI,GAAKL,CAAA,C,SAAA,E,SAAA,E,GAAL,CAAgDR,QAAA,C,IAAA,EADpD,CAOA,IAAI6B,UAAA,CAAWrC,SAAA,C,WAAA,CAAf,CAGA,GAAI,sC,MAAA,EAA2CoC,QAAA,C,SAAA,CAA3C,CAAJ,CAA+D,CAC7D,IAAIH,GAAA,CAAIK,MAAA,C,SAAA,CAAa3B,SAAA,C,QAAA,C,GAAA,CAAb,CAAR,CACAC,YAAA,C,OAAA,EAAqBqB,GAArB,CACA,IAAIM,SAAA,C,GAAJ,CACA,IAAIL,MAAA,CAAOM,MAAA,C,SAAA,E,SAAA,CAAX,CAEA,GAAI,U,SAAA,EAAeN,MAAf,CAAJ,CAA2B,CAACK,SAAA,C,GAAA,CAAD,CAC3B,IAAIE,OAAA,CAAQP,MAAA,C,SAAA,EAAaK,SAAb,CAAZ,CACA,GAAKE,OAAA,C,SAAA,E,GAAL,CAAwB,CAAC,M,QAAA,CAAD,CACxB,IAAIZ,IAAA,CAAK,C,QAAC,CAASY,OAAA,CAAQA,OAAA,C,SAAA,E,GAAR,CAAV,C,QAAoC,CAASA,OAAA,CAAQA,OAAA,C,SAAA,E,GAAR,CAA7C,C,SAAuE,CAAU,IAAjF,CAAT,CACAb,OAAA,CAAQS,UAAR,EACA,M,SAAA,CAX6D,CAe/D,GAAI,O,SAAA,EAAYD,QAAA,C,SAAA,CAAZ,CAAJ,CAAgC,CAC9B5B,QAAA,C,KAAA,EACA,M,QAAA,CAF8B,CAMhC,GAAI,W,SAAA,EAAgBgC,MAAA,C,SAAA,CAAhB,CAAJ,CACA,CACI,IAAId,OAAA,C,GAAJ,CACA,IAAIC,KAAA,CAAMW,MAAA,CAAO7C,GAAA,C,SAAP,CAAgCkB,SAAA,C,SAAA,CAAhC,CAAV,CACA,GAAKgB,KAAA,GAAU,IAAf,CAAsB,K,eAAA,CAEtB,GAAI,Q,MAAA,EAAaA,KAAA,C,SAAA,GAAb,CAAJ,CAA+B,CAC3BD,OAAA,C,IAAA,CAD2B,CAA/B,IAEO,CACHC,KAAA,CAAQA,KAAA,C,SAAA,I,aAAA,GAAR,CADG,CAGP,IAAIe,GAAA,CAAM,IAAIC,IAAJ,EAAV,CACA,IAAIC,OAAA,CAAUF,GAAA,C,SAAA,I,GAAd,CACA,IAAItB,OAAA,C,GAAJ,CACA,IAAIN,QAAA,C,GAAJ,CACA,IAAIlB,OAAA,C,IAAJ,CACA,IAAIuB,OAAA,C,GAAJ,CACA,IAAI0B,QAAA,C,SAAJ,CACAA,QAAA,CAAUD,OAAA,C,IAAA,C,SAAA,CAAsBC,QAAhC,CACAA,QAAA,CAAUD,OAAA,C,IAAA,C,SAAA,CAAsBC,QAAhC,CACAA,QAAA,CAAUD,OAAA,C,GAAA,C,QAAA,CAAmBC,QAA7B,CACAA,QAAA,CAAUD,OAAA,C,GAAA,C,SAAA,CAAmBC,QAA7B,CACAA,QAAA,CAAWD,OAAA,C,GAAA,EAAaF,GAAA,C,SAAA,K,GAAd,C,SAAA,CAA2CG,QAArD,CAEA,IAAIA,QAAA,CAASP,MAAA,C,SAAA,CAAkBO,QAAlB,CAAb,CACA,GAAIA,QAAA,GAAa,IAAjB,CAAwB,M,SAAA,CAExB,IAAItB,SAAA,CAAUe,MAAA,C,QAAA,C,SAAA,CAAd,CACA,GAAIf,SAAA,C,SAAA,E,MAAA,E,SAAA,E,GAAJ,CAAkC,CAC9BJ,OAAA,C,IAAA,CACAI,SAAA,CAAYA,SAAA,C,OAAA,E,MAAA,E,GAAA,CAAZ,CAF8B,CAIlCF,UAAA,GACA,GAAGM,KAAH,CAAS,CACLf,YAAA,C,SAAA,EAA2Be,KAA3B,CACA7B,EAAA,CAAG,CAAC6B,KAAD,CAAOkB,QAAP,CAAgB9C,QAAA,C,SAAA,CAAhB,E,SAAA,E,GAAA,CAAH,EACA2C,GAAA,CAAM,IAAIC,IAAJ,EAAN,CACA,IAAIG,KAAA,CAAQ,IAAIH,IAAJ,CAASD,GAAA,C,SAAA,GAAT,CAA4BA,GAAA,C,SAAA,GAA5B,CAA4CA,GAAA,C,SAAA,GAA5C,CAA2DG,QAAA,C,SAAA,E,GAAA,C,GAAA,CAA3D,CAAiFA,QAAA,C,SAAA,E,GAAA,C,GAAA,CAAjF,CAAuGA,QAAA,C,SAAA,E,GAAA,C,GAAA,G,GAAvG,C,GAAA,EAAoIH,GAAhJ,CACApB,UAAA,CAAWT,GAAX,CAAeiC,KAAf,GAAyBjC,GAAA,EAAzB,CALK,CAhCb,CADA,IAwCO,CACHkC,KAAA,C,SAAA,EADG,C","sourcesContent":["/*v11.6 change to monitor money  */\n/*11.7: easy input time */\n/*11.7.1: change launch code */\n/*11.7.1: ui change */\n// aHR0cHM6Ly9sdWhhb21pbmcuZ2l0aHViLmlvL29wZW51cmwvc3BidXkuYm9vay5qcw\n// https://luhaoming.github.io/openurl/spbuy.book.js\n\nvar ver='11.7.6';\n\nfunction dd(str){if(indebug) console.log(str);}\nfunction tt(t){document.title=t;}\nfunction getCookie(cname) {\n  var name = cname + \"=\";\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(';');\n  for(var i = 0; i <ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n} \nfunction clickBtn(str){\n    document.querySelectorAll(\"button\").forEach(function(o){\n      var re = new RegExp(str);\n      if ( re.test(o.innerText) ){ o.click();return;}\n    })\n}\nfunction thouand(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction getlocalv(key,def=''){\n    if ( localStorage.getItem(key) ) {\n        return localStorage.getItem(key);\n    }\n    return def;\n}\n\nfunction run(){\n    if ( stopkeep>0) { dd('stopkeep'); return;}\n    dd('run start');\n\n    /*monitor voucher picked and put order */\n    var chkVoucherSeted = setInterval(function(){\n        if ($(\"._2oxnOl ._3_CKvu\").length>0){\n            clearInterval(master);\n            clearInterval(chkVoucherSeted);\n            if (keepbuy){\n                dd('keepbuy');\n                stopall=0;\n                clearmodal();\n                setTimeout(function(){ stopkeep++;},timelimit*1000);\n                setTimeout(run,1000);\n            }\n            // clickBtn('下訂單');\n            dd('下訂單');\n        }\n    },10);\n    /* launch modal */ \n    master=setInterval(launch,5);\n    setTimeout(function(){clearInterval(master);stopall++;},timelimit*1000);\n\n}\n\nfunction launch() {\n    if ( stopall > 0) return;\n    if ( document.querySelectorAll(\".shopee-popup-form\").length >0) {return;}\n    // dd('try launch '+document.querySelectorAll(\"._uyiyo\").length);\n    $('button.-z1FfD').click();  /* 沒有賣家勸的選擇折價券  */\n    var modalLoad = setInterval(function() {\n       if ( stopall > 0 ) clearInterval(modalLoad);\n       // if ( $('._1x7rzD').length>0 ) {\n       if ( $(\".shopee-popup-form__title\").length>0 ) {\n          // dd('voucher modal loaded');\n          clearInterval(modalLoad);\n          setvoucher();\n       }\n    }, 10);\n}\n\nfunction setvoucher(){\n    // dd('setvoucher');\n    var tsetvoucher=setInterval(function(){\n        // interval for detect modal show, then click \n        if ( $(\".shopee-popup-form__title\").length >0 && $(\"button.btn-solid-primary--disabled\").length <1 ){\n            // dd('voucher api loaded');\n            clearInterval(tsetvoucher);\n            \n            // detect vcode\n            if  ( typemin ){\n                if (  $(\"div._3tO06v._2oHLwQ:contains('最低消費$\"+thouand(vcode)+\"')\").closest('.uKqFae').find('div._22DmGV').length > 0 ){\n                    clearInterval(master);stopall++;\n                    if ( $(\"div._3tO06v._2oHLwQ:contains('最低消費$\"+thouand(vcode)+\"')\").closest('.uKqFae').find('div._22DmGV._1Vir4l').length <1) $(\"div._3tO06v._2oHLwQ:contains('最低消費$\"+thouand(vcode)+\"')\").closest('.uKqFae').find('div._22DmGV').click();\n                    clickBtn('好');\n                    return;\n                } else {\n                    // dd('close voucher modal');\n                    // $(\"#modal\").hide();\n                    clickBtn('取消');\n                }                \n            } else {\n                if (  $(\"a[href*=\"+vcode+\"]\").closest('.uKqFae').find('div._22DmGV').length > 0 ){\n                    clearInterval(master);stopall++;\n                    if ( $(\"a[href*=\"+vcode+\"]\").closest('.uKqFae').find('div._22DmGV._1Vir4l').length < 1 ) $(\"a[href*=\"+vcode+\"]\").closest('.uKqFae').find('div._22DmGV').click();\n                    clickBtn('好');\n                    return;\n                } else {\n                    // dd('close voucher modal');\n                    // $(\"#modal\").hide();\n                    clickBtn('取消');\n                }\n                \n            }\n        }\n        // modal detected , stop detect\n    },10)\n}\n\n\nfunction addcart(token){\n  var produrl = '/api/v2/item/get?itemid='+prod.itemid+'&shopid='+prod.shopid;\n  fetch(produrl).then(r=>{return r.json()}).then(function(aa){\n      prod.itemname = aa.item.name;\n      prod.itemid = aa.item.itemid;\n      prod.shopid = aa.item.shopid;\n      prod.modelid = (aa.item.models.length>0?aa.item.models.find(itm=>{return itm.stock>0}).modelid:null);\n      console.log(prod);\n      \n      postbody = {\"quantity\":parseInt(qty),\"checkout\":true,\n                          \"update_checkout_only\":false,\n                           \"donot_add_quantity\":false,\n                           \"source\":\"{\\\"refer_urls\\\":[]}\",\"shopid\":prod.shopid,\"itemid\":prod.itemid\n                           }\n      if (prod.modelid) postbody[\"modelid\"] =prod.modelid;\n      fetch(\"/api/v2/cart/add_to_cart\",{\"credentials\":\"include\",\"headers\":{\"accept\":\"application/json\",\"accept-language\":\"zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7\",\"content-type\":\"application/json\",\"if-none-match-\":\"55b03-7368423e82746fc7956d93990205342f\",\"sec-fetch-mode\":\"cors\",\"sec-fetch-site\":\"same-origin\",\"x-api-source\":\"pc\",\"x-csrftoken\":token,\"x-requested-with\":\"XMLHttpRequest\"},\"referrer\":\"\"+srcurl+\"\",\"referrerPolicy\":\"no-referrer-when-downgrade\",\"body\": JSON.stringify(postbody),\"method\":\"POST\",\"mode\":\"cors\"})\n      .then(r=>{return r.json()})\n      .then(function(r){\n          console.log(r);\n          location.href='/cart/?itemIds='+prod.itemid+'&shopId='+prod.shopid;\n      })\n  })\n  throw(9);\n}\n\nfunction clearmodal()\n{\n    if ( $(\".shopee-popup-form__title\").length >0 ) clickBtn('取消');\n}\n/*\n---------------------------  main codes  --------------------------\n*/\n\nvar XCSRFTOKEN=getCookie('csrftoken'); \n\n// fast add cart\nif (/(\\-i\\.\\d+\\.\\d+)|(product\\/\\d+\\/\\d+)/.test(location.href) ){\n  var qty=prompt('qty',getlocalv('myqty',1));\n  localStorage.myqty = qty;\n  var delimiter='.';\n  var srcurl=window.location.href;\n  \n  if (/product/.test(srcurl)){delimiter='/';}\n  var tmpshop=srcurl.split(delimiter);\n  if ( tmpshop.length < 1){throw('cant find shopid,itemid'); }\n  var prod={'itemid':tmpshop[tmpshop.length-1],'shopid':tmpshop[tmpshop.length-2],'modelid':null}\n  addcart(XCSRFTOKEN);  \n  throw('goto addcart');\n}\n\n// fast click buy btn\nif (/cart/.test(location.href) ){\n  clickBtn(\"去買單\");\n  throw('addcart ok');\n}\n\n/*main process*/\nif (/checkout/.test(window.location) )\n{\n    var typemin = false;\n    var vcode=prompt(ver+':數字=最低消費, 代碼=折扣碼?', getlocalv('mylastvcode'));\n    if ( vcode === null ) throw('force quit');\n   \n    if (/^\\d+$/.test(vcode.trim())){\n        typemin = true;\n    } else {\n        vcode = vcode.trim().toUpperCase();\n    }\n    var now = new Date();\n    var timemod = now.getHours()/6;\n    var stopall=0;\n    var stopkeep=0;\n    var indebug=true;\n    var keepbuy=false;\n    var worktime='235950';\n    worktime=(timemod<3.83?'225950':worktime);\n    worktime=(timemod<3.66?'212950':worktime);\n    worktime=(timemod<3?'175950':worktime);\n    worktime=(timemod<2?'115950':worktime);\n    worktime=((timemod<1.6||now.getHours()==10)?'105950':worktime);\n\n    var worktime=prompt('開始時間HHMM',worktime);\n    if (worktime === null ) throw('force quit');\n    \n    var timelimit=prompt('執行幾秒','120');\n    if (timelimit.split(' ').length>1){\n        keepbuy = true;\n        timelimit = timelimit.split(' ')[0];\n    } \n    clearmodal();\n    if(vcode){\n        localStorage.mylastvcode = vcode;\n        tt([vcode,worktime,document.title].join('-'));\n        now = new Date();\n        var timer = new Date(now.getFullYear(), now.getMonth(), now.getDate(), worktime.substr(0,2), worktime.substr(2,2), worktime.substr(4,2)||0, 0) -now;\n        setTimeout(run,timer) || run();\n    }\n} else {\n    alert('切換到結帳區');\n}"]}
